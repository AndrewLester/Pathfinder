import org.gradle.internal.os.OperatingSystem
import org.gradle.nativeplatform.NativeBinarySpec

def armCompilerPrefix = project.hasProperty('armCompilerPrefix') ? project.armCompilerPrefix : null
def toolChainPath = project.hasProperty('toolChainPath') ? project.toolChainPath : null
def roborioToolchain = project.hasProperty('roborioToolchain') ? project.roborioToolchain : null

subprojects {
    plugins.withType(CPlugin).whenPluginAdded {
        model {
            platforms {
                arm {
                    architecture 'arm'
                    operatingSystem 'linux'
                }
                roborio {
                    architecture 'arm'
                    operatingSystem 'linux'
                }
                x86 {
                    architecture 'x86'
                }
                x64 {
                    architecture 'x86_64'
                }
            }
            
            toolChains {
                visualCpp(VisualCpp) {
                    if (OperatingSystem.current().isWindows()) {
                        // Taken from nt-core, fixes VS2015 compilation issues 

                        // Workaround for VS2015 adapted from https://github.com/couchbase/couchbase-lite-java-native/issues/23
                        def VS_2015_INCLUDE_DIR = "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10240.0/ucrt"
                        def VS_2015_LIB_DIR = "C:/Program Files (x86)/Windows Kits/10/Lib/10.0.10240.0/ucrt"
                        def VS_2015_INSTALL_DIR = 'C:/Program Files (x86)/Microsoft Visual Studio 14.0'
                        def vsInstallDir = file(VS_2015_INSTALL_DIR)

                        eachPlatform {
                            cCompiler.withArguments { args ->
                                if (file(VS_2015_INCLUDE_DIR).exists()) {
                                    args << "/I$VS_2015_INCLUDE_DIR"
                                }
                            }
                            linker.withArguments { args ->
                                if (file(VS_2015_LIB_DIR).exists()) {
                                    if (platform.architecture.name == 'x86') {
                                        args << "/LIBPATH:$VS_2015_LIB_DIR/x86"
                                    } else {
                                        args << "/LIBPATH:$VS_2015_LIB_DIR/x64"
                                    }
                                }
                            }
                        }
                    }
                }
                armGcc(Gcc) {
                    if (toolChainPath != null) path(toolChainPath)
                    if (armCompilerPrefix != null) {
                        target("arm") {
                            cCompiler.executable = armCompilerPrefix + cCompiler.executable
                            cppCompiler.executable = armCompilerPrefix + cppCompiler.executable
                            linker.executable = armCompilerPrefix + linker.executable
                            assembler.executable = armCompilerPrefix + assembler.executable

                            cppCompiler.withArguments { args ->
                                args << '-std=c++11' << '-fPIC' << '-rdynamic'
                            }

                            cCompiler.withArguments {args ->
                                args << '-fPIC'
                                args.remove("-m32")
                            }
                            
                            linker.withArguments { args ->
                                args << '-shared'
                                args.remove('-m32')
                            }
                            
                            staticLibArchiver.executable = armCompilerPrefix + staticLibArchiver.executable
                        }
                    }
                }
                roborioGcc(Gcc) {
                    if (roborioToolchain != null) path(roborioToolchain)
                    target("roborio") {
                        cCompiler.executable = 'arm-frc-linux-gnueabi-' + cCompiler.executable
                        cppCompiler.executable = 'arm-frc-linux-gnueabi-' + cppCompiler.executable
                        linker.executable = 'arm-frc-linux-gnueabi-' + linker.executable
                        assembler.executable = 'arm-frc-linux-gnueabi-' + assembler.executable

                        cppCompiler.withArguments { args ->
                            args << '-std=c++11' << '-fPIC' << '-rdynamic'
                        }

                        cCompiler.withArguments {args ->
                            args << '-fPIC'
                            args.remove("-m32")
                        }
                        
                        linker.withArguments { args ->
                            args << '-shared'
                            args.remove('-m32')
                        }
                        
                        staticLibArchiver.executable = 'arm-frc-linux-gnueabi-' + staticLibArchiver.executable
                    }
                }
                gcc(Gcc) {
                    target("x64") {
                        cppCompiler.withArguments { args ->
                            args << '-std=c++11' << '-fPIC' << '-rdynamic'
                        }
                        cCompiler.withArguments {args ->
                            args << '-fPIC'
                        }

                        linker.withArguments { args ->
                            args << '-shared'
                        }

                    }
                    target("x86") {
                        cppCompiler.withArguments { args ->
                            args << '-std=c++11' << '-fPIC' << '-rdynamic'
                            args << '-m32'
                        }
                        cCompiler.withArguments {args ->
                            args << '-fPIC'
                        }

                        linker.withArguments { args ->
                            args << '-shared'
                        }

                    }
                }
                clang(Clang) {
                    target('x86') {
                        cppCompiler.withArguments { args ->
                            args << '-std=c++11' << '-fPIC' << '-m32'
                        }
                        linker.withArguments { args ->
                            args << '-m32'
                        }
                    }
                    target('x64') {
                        cppCompiler.withArguments { args ->
                            args << '-std=c++11' << '-fPIC'
                        }
                    }
                }
            }
        }
    }
}

// project.ext.installBinary = { binary, headers ->
//     def allHeaders = fileTree(dir: headers.absolutePath, include: '**/*.h').getFiles().collect { file ->
//         file.absolutePath
//     }
    
//     def prefix = "/usr/local"
//     if (project.hasProperty("prefix")) prefix = project.prefix
    
//     if (allHeaders.size > 0) {
//         exec {
//             executable "install"
//             args "-m", "0755", "-d", "$prefix/include"
//         }
       
//         exec {
//             executable "cp"
//             args "-r", "${headers.absolutePath}/", "$prefix/include"
//         }
//     }
    
//     exec {
//         executable "install"
//         args "-m", "0755", "-d", "$prefix/lib"
//     }
    
//     exec {
//         executable "install"
//         args "-m", "0755", "${binary.absolutePath}", "$prefix/lib"
//     }
// }
